{"version":3,"sources":["components/Score/index.js","components/Nav/index.js","components/Grid/CardColumns.js","components/Grid/Container.js","components/CharacterCard/index.js","App.js","index.js"],"names":["Score","props","className","message","score","topScore","Nav","href","divStyle","columnCount","CardColumns","children","style","Container","CharacterCard","data-id","id","onClick","src","image","alt","App","state","sortedCharacters","handleCharClick","characters","clicked","setState","prevState","loadCharacters","ids","characterList","i","push","length","randomNum","Math","floor","random","splice","this","map","character","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"88BAiBeA,MAdf,SAAeC,GACb,OACE,wBAAIC,UAAU,sBACZ,wBAAIA,UAAU,iBACXD,EAAME,QACH,eAAiBF,EAAME,QACvB,2BAEN,wBAAID,UAAU,YAAd,UAAiCD,EAAMG,OACvC,wBAAIF,UAAU,YAAd,KACA,wBAAIA,UAAU,YAAd,aAAoCD,EAAMI,Y,MCQjCC,MAjBf,SAAaL,GACX,OACE,yBAAKC,UAAU,+CACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,eAAeK,KAAK,KAAjC,eAGA,kBAAC,EAAD,CACEJ,QAASF,EAAME,QACfC,MAAOH,EAAMG,MACbC,SAAUJ,EAAMI,cCZpBG,EAAW,CACfC,YAAa,KAGR,SAASC,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SAC5B,OACE,yBAAKT,UAAU,eAAeU,MAAOJ,GAClCG,GCPA,SAASE,EAAT,GAAkC,IAAbF,EAAY,EAAZA,SAC1B,OAAO,yBAAKT,UAAU,kBAAkBS,G,MCQ3BG,MARf,SAAuBb,GACrB,OACE,yBAAKC,UAAU,iBAAiBa,UAASd,EAAMe,GAAIC,QAAShB,EAAMgB,SAChE,yBAAKC,IAAKjB,EAAMkB,MAAOC,IAAI,MAAMlB,UAAU,oB,OCmGlCmB,E,2MAlGbC,MAAQ,CACNlB,MAAO,EACPC,SAAU,EACVF,QAAS,GACToB,iBAAkB,I,EAGpBC,gBAAkB,SAAAR,GAEhB,GAAIS,EAAWT,EAAK,GAAGU,QAAS,CAK9B,IAAIrB,EAAW,EAAKiB,MAAMjB,SAEtB,EAAKiB,MAAMlB,MAAQC,IACrBA,EAAW,EAAKiB,MAAMlB,OAIxB,EAAKuB,SAAS,CAAExB,QAAS,cAAeC,MAAO,EAAGC,SAAUA,SAM5DoB,EAAWT,EAAK,GAAGU,SAAU,EAC7B,EAAKC,UAAS,SAACC,EAAW3B,GACxB,MAAO,CAAEG,MAAOwB,EAAUxB,MAAQ,EAAGD,QAAS,gBAKlD,EAAK0B,kB,EAGPA,eAAiB,WAKf,IAJA,IAAIC,EAAM,GACNC,EAAgB,GAGXC,EAAI,EAAGA,EAAI,GAAIA,IAEG,IAArB,EAAKV,MAAMlB,QACbqB,EAAWO,GAAGN,SAAU,GAE1BI,EAAIG,KAAKD,GAQX,KAAOF,EAAII,OAAS,GAAG,CACrB,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWR,EAAII,QAC3ClB,EAAKc,EAAIS,OAAOJ,EAAW,GACjCJ,EAAcE,KAAKR,EAAWT,IAIhC,EAAKW,SAAS,CAAEJ,iBAAkBQ,K,mFAIlCS,KAAKX,mB,+BAGG,IAAD,OACP,OACE,6BAEE,kBAAC,EAAD,CACE1B,QAASqC,KAAKlB,MAAMnB,QACpBC,MAAOoC,KAAKlB,MAAMlB,MAClBC,SAAUmC,KAAKlB,MAAMjB,WAEvB,kBAACQ,EAAD,KAEE,kBAACH,EAAD,KACG8B,KAAKlB,MAAMC,iBAAiBkB,KAAI,SAAAC,GAC/B,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAU1B,GACfA,GAAI0B,EAAU1B,GACdG,MAAOuB,EAAUvB,MACjBF,QAAS,kBAAM,EAAKO,gBAAgBkB,EAAU1B,iB,GAxF9C4B,IAAMC,WCFxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.90914d36.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n  return (\n    <ul className=\"navbar-nav mr-auto\">\n      <li className=\"nav-item px-5\">\n        {props.message\n          ? \"You guessed \" + props.message\n          : \"Click an image to begin\"}\n      </li>\n      <li className=\"nav-item\">Score: {props.score}</li>\n      <li className=\"nav-item\">|</li>\n      <li className=\"nav-item\">Top Score {props.topScore}</li>\n    </ul>\n  );\n}\nexport default Score;\n","import React from \"react\";\nimport Score from \"../Score\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div className=\"container\">\n        <a className=\"navbar-brand\" href=\"/\">\n          Clicky Game\n        </a>\n        <Score\n          message={props.message}\n          score={props.score}\n          topScore={props.topScore}\n        />\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\nconst divStyle = {\n  columnCount: \"4\"\n};\n\nexport function CardColumns({ children }) {\n  return (\n    <div className=\"card-columns\" style={divStyle}>\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Container({ children }) {\n  return <div className=\"container my-5\">{children}</div>;\n}\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n  return (\n    <div className=\"card shadow-sm\" data-id={props.id} onClick={props.onClick}>\n      <img src={props.image} alt=\"...\" className=\"img-thumbnail\" />\n    </div>\n  );\n}\n\nexport default CharacterCard;\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport { CardColumns, Container } from \"./components/Grid\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport characters from \"./lotr.json\";\n\nclass App extends React.Component {\n  state = {\n    score: 0, //User's count of correct guesses\n    topScore: 0, //User's highest score\n    message: \"\", //Displays messages incorrect or correct depending on user's action\n    sortedCharacters: [] //An array of character objects. The order is random.\n  };\n\n  handleCharClick = id => {\n    //Checks if the character has been selected before\n    if (characters[id - 1].clicked) {\n      /*If the character has been selected before\n      and the current score is highest score,\n      update the highest score value\n      */\n      let topScore = this.state.topScore;\n\n      if (this.state.score > topScore) {\n        topScore = this.state.score;\n      }\n\n      //Resets score and displays \"You guess incorrectly\"\n      this.setState({ message: \"incorrectly\", score: 0, topScore: topScore });\n    } else {\n      /* If character has not been selected before,\n        update character's object clicked property value to true.\n        Then increase the score incrementally and displays messaage \"You guessed correctly\"\n      */\n      characters[id - 1].clicked = true;\n      this.setState((prevState, props) => {\n        return { score: prevState.score + 1, message: \"correctly\" };\n      });\n    }\n\n    //Render the character images\n    this.loadCharacters();\n  };\n\n  loadCharacters = () => {\n    let ids = [];\n    let characterList = [];\n\n    //Numbers 0 to 11 is added to the array\n    for (let i = 0; i < 12; i++) {\n      //If the user guess incorrectly, resets all the character clicked property to false\n      if (this.state.score === 0) {\n        characters[i].clicked = false;\n      }\n      ids.push(i);\n    }\n\n    /* While there's an id in the array, \n    generate a random number 11 times. The random number\n    is equivalent to the index or position of character\n    in the original character array. The character is then\n    added to the sorted array */\n    while (ids.length > 0) {\n      const randomNum = Math.floor(Math.random() * ids.length);\n      const id = ids.splice(randomNum, 1);\n      characterList.push(characters[id]);\n    }\n\n    //Render the character images. The order of the images is random\n    this.setState({ sortedCharacters: characterList });\n  };\n\n  componentDidMount() {\n    this.loadCharacters();\n  }\n\n  render() {\n    return (\n      <div>\n        {/*NAV*/}\n        <Nav\n          message={this.state.message}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Container>\n          {/*Character Images*/}\n          <CardColumns>\n            {this.state.sortedCharacters.map(character => {\n              return (\n                <CharacterCard\n                  key={character.id}\n                  id={character.id}\n                  image={character.image}\n                  onClick={() => this.handleCharClick(character.id)}\n                />\n              );\n            })}\n          </CardColumns>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}